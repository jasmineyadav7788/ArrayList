import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(1, n, k, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int start, int n, int k, List<Integer> path, List<List<Integer>> result) {
        if (path.size() == k) {
            result.add(new ArrayList<>(path));
            return;
        }

        for (int i = start; i <= n; i++) {
            path.add(i);
            backtrack(i + 1, n, k, path, result);
            path.remove(path.size() - 1);
        }
    }

    public static void main(String[] args) {
        int n1 = 4, k1 = 2;
        Solution solution = new Solution();
        List<List<Integer>> combinations1 = solution.combine(n1, k1);
        System.out.println(combinations1);

        int n2 = 1, k2 = 1;
        List<List<Integer>> combinations2 = solution.combine(n2, k2);
        System.out.println(combinations2);
    }
}
